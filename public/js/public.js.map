{"version":3,"sources":["AppPublic.js","Http.js","Notify.js","Preloader.js","PublicCtrl.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"public.js","sourcesContent":["var app = angular.module('app',\r\n    [\r\n        'ngMaterial', 'ngAnimate', 'mdColors', 'ngMessages', 'internationalPhoneNumber', 'ui.mask', 'bcherny/formatAsCurrency', 'ui.select', 'ngSanitize',\r\n        'ngPassword'\r\n    ]\r\n);\r\nfunction home($path) {\r\n    return __domain + $path;\r\n}\r\n\r\n\r\napp.config(function ($mdThemingProvider) {\r\n    var neonRedMap = $mdThemingProvider.extendPalette('cyan', {\r\n        '500': '#00BBD3',\r\n        '300': '#0097a7',\r\n        '600': '#00bcd4',\r\n        '400': '#212121',\r\n        'contrastDefaultColor': 'light'\r\n    });\r\n    // Register the new color palette map with the name <code>neonRed</code>\r\n    $mdThemingProvider.definePalette('araCyan', neonRedMap);\r\n    $mdThemingProvider.theme('default')\r\n        .primaryPalette('cyan', {'default': '700'})\r\n        .accentPalette('blue-grey', {'default': '500', 'hue-1': '600', 'hue-2': '400', 'hue-3': '300'})\r\n        .warnPalette('red', {'default': '600'})\r\n        .backgroundPalette('grey', {'default': '50'});\r\n\r\n});\r\n\r\napp.config(function (ipnConfig) {\r\n    ipnConfig.defaultCountry = 'ir';\r\n    // ipnConfig.numberType = ipnConfig.numberFormat.NATIONAL;\r\n});\r\n\r\n\r\napp.filter('curFilter', function () {\r\n    return function (value) {\r\n        return value;\r\n    }\r\n});","app.factory('htp', function ($http, notify) {\r\n    var _Htp = function (url, data) {\r\n        this.options = {};\r\n        this.afterSuccess = [];\r\n        var that = this;\r\n        $http.post(url, data)\r\n            .success(function (response) {\r\n                if (that.options.then) {\r\n                    that.options.then.call(this, response);\r\n                }\r\n\r\n                if (that.options.after) {\r\n                    that.options.after.call(this, response);\r\n                }\r\n                _.each(that.afterSuccess, function (item) {\r\n                    item.call(that, response);\r\n                });\r\n            })\r\n            .error(function (response, sts) {\r\n                if (that.options.after) {\r\n                    that.options.after.call(this, response, sts);\r\n                }\r\n                if (that.options.error) {\r\n                    that.options.error.call(this, response, sts);\r\n                }\r\n                switch (sts) {\r\n                    case 422:\r\n                        if (that.errorItem) {\r\n                            that.errorItem.call(this, response);\r\n                        }\r\n                        notify('error', trans('message.422'));\r\n                        break;\r\n                }\r\n            });\r\n    };\r\n\r\n\r\n    _Htp.prototype.then = function (fn) {\r\n        this.options.then = fn;\r\n        return this;\r\n    };\r\n\r\n    _Htp.prototype.after = function (fn) {\r\n        this.options.after = fn;\r\n        return this;\r\n    };\r\n\r\n    _Htp.prototype.error = function (fn) {\r\n        this.options.error = fn;\r\n        return this;\r\n    };\r\n\r\n    _Htp.prototype.errorNotice = function (fn) {\r\n        this.errorItem = fn;\r\n        return this;\r\n    };\r\n\r\n    _Htp.prototype.saveSend = function (title) {\r\n        this.afterSuccess.push(function () {\r\n            notify('info', trans('message.set_record', {attr: title}))\r\n        });\r\n        return this;\r\n    };\r\n\r\n\r\n    return function (url, data) {\r\n        return new _Htp(url, data);\r\n    };\r\n});","app.factory('notify', function () {\r\n    return function ($type, $text, $delay) {\r\n        $delay = $delay || 7500;\r\n        var scope = angular.element('#notify-wrapper').scope();\r\n        if (scope)\r\n            scope._notify($type, $text, $delay);\r\n    }\r\n});\r\n\r\n\r\napp.controller('NotifyCtrl', function ($scope, $timeout) {\r\n    $scope.admin_notify = [];\r\n    $scope.times = [];\r\n    $scope._notify = function ($type, $text, $delay) {\r\n        $scope.admin_notify.push({type: $type, text: $text, delay: $delay});\r\n        $scope.times.push($timeout(function () {\r\n            $scope._destroy(0);\r\n        }, $delay))\r\n    };\r\n    $scope._destroy = function ($index) {\r\n        $scope.admin_notify = _.without($scope.admin_notify, $scope.admin_notify[$index]);\r\n        $scope.times = _.without($scope.times, $scope.times[$index]);\r\n    };\r\n});","app.factory('loader', function () {\r\n    return function ($sts) {\r\n        var scope = angular.element('#main-progress-bar').scope();\r\n        if($sts) {\r\n            scope._on();\r\n        }\r\n        else{\r\n            scope._off();\r\n        }\r\n    }\r\n});\r\n\r\napp.controller('PreloaderCtrl', function ($scope, $timeout) {\r\n    $scope._off = function () {\r\n        $scope._loader = false;\r\n    };\r\n    $scope._on = function () {\r\n        $scope._loader = true;\r\n    }\r\n});","app.controller('PublicCtrl', function ($scope, $http) {\r\n    console.log('scope', $scope);\r\n\r\n    $http.post(home('get-currency')).success(function (response) {\r\n        $scope.itemArray = response;\r\n        $scope.selected = {value: $scope.itemArray[0]};\r\n    });\r\n\r\n});\r\n\r\n\r\napp.controller('SignupCtrl', function ($scope, htp, $http) {\r\n    var _this = $scope;\r\n    _this.submit = function () {\r\n        _this.getCountry();\r\n        _this.errorItem = undefined;\r\n        $http.post(home('sign-up'), _this.data).success(function (response) {\r\n            window.locations.href = home('sign-in');\r\n        }).error(function (response, sts) {\r\n            _this.refreshCaptcha();\r\n            if (sts == 422) {\r\n                _this.errorItem = response;\r\n            }\r\n        });\r\n    };\r\n\r\n    _this.getCountry = function () {\r\n        _this.data.country = angular.element('#phone-number').intlTelInput(\"getSelectedCountryData\");\r\n    };\r\n\r\n    $scope.codeMapper = function (code) {\r\n        return {code: code};\r\n    };\r\n\r\n    $scope.codeExtractor = function (currency) {\r\n        return currency.code;\r\n    };\r\n    _this.currencies = ['EUR', 'GBP'];\r\n    _this.refresh_captcha = function () {\r\n        htp(home('get-captcha')).then(function (response) {\r\n            _this.captcha_src = response;\r\n        });\r\n    }\r\n});"]}